import pefile

class PEFile:
    """ 
    This Class is constructed by parsing the pe file for the interesting features
    each pe file is an object by itself and we extract the needed information
    into attributes of the class.
    """
    
    def __init__(self, filename):
        self.pe = pefile.PE(filename, fast_load=True)
        self.filename = filename
        
       # DOS Header
        try:
            self.e_magic = self.pe.DOS_HEADER.e_magic
        except Exception:
            self.e_magic = None

        try:
            self.e_cblp = self.pe.DOS_HEADER.e_cblp
        except Exception:
            self.e_cblp = None

        try:
            self.e_cp = self.pe.DOS_HEADER.e_cp
        except Exception:
            self.e_cp = None

        try:
            self.e_crlc = self.pe.DOS_HEADER.e_crlc
        except Exception:
            self.e_crlc = None

        try:
            self.e_cparhdr = self.pe.DOS_HEADER.e_cparhdr
        except Exception:
            self.e_cparhdr = None

        try:
            self.e_minalloc = self.pe.DOS_HEADER.e_minalloc
        except Exception:
            self.e_minalloc = None

        try:
            self.e_maxalloc = self.pe.DOS_HEADER.e_maxalloc
        except Exception:
            self.e_maxalloc = None

        try:
            self.e_ss = self.pe.DOS_HEADER.e_ss
        except Exception:
            self.e_ss = None

        try:
            self.e_sp = self.pe.DOS_HEADER.e_sp
        except Exception:
            self.e_sp = None

        try:
            self.e_csum = self.pe.DOS_HEADER.e_csum
        except Exception:
            self.e_csum = None

        try:
            self.e_ip = self.pe.DOS_HEADER.e_ip
        except Exception:
            self.e_ip = None

        try:
            self.e_cs = self.pe.DOS_HEADER.e_cs
        except Exception:
            self.e_cs = None

        try:
            self.e_lfarlc = self.pe.DOS_HEADER.e_lfarlc
        except Exception:
            self.e_lfarlc = None

        try:
            self.e_ovno = self.pe.DOS_HEADER.e_ovno
        except Exception:
            self.e_ovno = None

        try:
            self.e_res = self.pe.DOS_HEADER.e_res
        except Exception:
            self.e_res = None

        try:
            self.e_oemid = self.pe.DOS_HEADER.e_oemid
        except Exception:
            self.e_oemid = None

        try:
            self.e_oeminfo = self.pe.DOS_HEADER.e_oeminfo
        except Exception:
            self.e_oeminfo = None

        try:
            self.e_res2 = self.pe.DOS_HEADER.e_res2
        except Exception:
            self.e_res2 = None

        try:
            self.e_lfanew = self.pe.DOS_HEADER.e_lfanew
        except Exception:
            self.e_lfanew = None

        # COFF File Header
        try:
            self.Machine = self.pe.FILE_HEADER.Machine
        except Exception:
            self.Machine = None

        try:
            self.NumberOfSections = self.pe.FILE_HEADER.NumberOfSections
        except Exception:
            self.NumberOfSections = None

        try:
            self.TimeDateStamp = self.pe.FILE_HEADER.TimeDateStamp
        except Exception:
            self.TimeDateStamp = None

        try:
            self.PointerToSymbolTable = self.pe.FILE_HEADER.PointerToSymbolTable
        except Exception:
            self.PointerToSymbolTable = None

        try:
            self.NumberOfSymbols = self.pe.FILE_HEADER.NumberOfSymbols
        except Exception:
            self.NumberOfSymbols = None

        try:
            self.SizeOfOptionalHeader = self.pe.FILE_HEADER.SizeOfOptionalHeader
        except Exception:
            self.SizeOfOptionalHeader = None

        try:
            self.Characteristics = self.pe.FILE_HEADER.Characteristics
        except Exception:
            self.Characteristics = None

        # Optional Header
        try:
            self.Magic = self.pe.OPTIONAL_HEADER.Magic
        except Exception:
            self.Magic = None

        try:
            self.MajorLinkerVersion = self.pe.OPTIONAL_HEADER.MajorLinkerVersion
        except Exception:
            self.MajorLinkerVersion = None

        try:
            self.MinorLinkerVersion = self.pe.OPTIONAL_HEADER.MinorLinkerVersion
        except Exception:
            self.MinorLinkerVersion = None

        try:
            self.SizeOfCode = self.pe.OPTIONAL_HEADER.SizeOfCode
        except Exception:
            self.SizeOfCode = None

        try:
            self.SizeOfInitializedData = self.pe.OPTIONAL_HEADER.SizeOfInitializedData
        except Exception:
            self.SizeOfInitializedData = None

        try:
            self.SizeOfUninitializedData = self.pe.OPTIONAL_HEADER.SizeOfUninitializedData
        except Exception:
            self.SizeOfUninitializedData = None

        try:
            self.AddressOfEntryPoint = self.pe.OPTIONAL_HEADER.AddressOfEntryPoint
        except Exception:
            self.AddressOfEntryPoint = None

        try:
            self.BaseOfCode = self.pe.OPTIONAL_HEADER.BaseOfCode
        except Exception:
            self.BaseOfCode = None

        try:
            self.BaseOfData = getattr(self.pe.OPTIONAL_HEADER, 'BaseOfData', 0)  # Only in PE32
        except Exception:
            self.BaseOfData = 0

        try:
            self.ImageBase = self.pe.OPTIONAL_HEADER.ImageBase
        except Exception:
            self.ImageBase = None

        try:
            self.SectionAlignment = self.pe.OPTIONAL_HEADER.SectionAlignment
        except Exception:
            self.SectionAlignment = None

        try:
            self.FileAlignment = self.pe.OPTIONAL_HEADER.FileAlignment
        except Exception:
            self.FileAlignment = None

        try:
            self.MajorOperatingSystemVersion = self.pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
        except Exception:
            self.MajorOperatingSystemVersion = None

        try:
            self.MinorOperatingSystemVersion = self.pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
        except Exception:
            self.MinorOperatingSystemVersion = None

        try:
            self.MajorImageVersion = self.pe.OPTIONAL_HEADER.MajorImageVersion
        except Exception:
            self.MajorImageVersion = None

        try:
            self.MinorImageVersion = self.pe.OPTIONAL_HEADER.MinorImageVersion
        except Exception:
            self.MinorImageVersion = None

        try:
            self.MajorSubsystemVersion = self.pe.OPTIONAL_HEADER.MajorSubsystemVersion
        except Exception:
            self.MajorSubsystemVersion = None

        try:
            self.MinorSubsystemVersion = self.pe.OPTIONAL_HEADER.MinorSubsystemVersion
        except Exception:
            self.MinorSubsystemVersion = None

        try:
            self.SizeOfImage = self.pe.OPTIONAL_HEADER.SizeOfImage
        except Exception:
            self.SizeOfImage = None

        try:
            self.SizeOfHeaders = self.pe.OPTIONAL_HEADER.SizeOfHeaders
        except Exception:
            self.SizeOfHeaders = None

        try:
            self.CheckSum = self.pe.OPTIONAL_HEADER.CheckSum
        except Exception:
            self.CheckSum = None

        try:
            self.Subsystem = self.pe.OPTIONAL_HEADER.Subsystem
        except Exception:
            self.Subsystem = None

        try:
            self.DllCharacteristics = self.pe.OPTIONAL_HEADER.DllCharacteristics
        except Exception:
            self.DllCharacteristics = None

        try:
            self.SizeOfStackReserve = self.pe.OPTIONAL_HEADER.SizeOfStackReserve
        except Exception:
            self.SizeOfStackReserve = None

        try:
            self.SizeOfStackCommit = self.pe.OPTIONAL_HEADER.SizeOfStackCommit
        except Exception:
            self.SizeOfStackCommit = None

        try:
            self.SizeOfHeapReserve = self.pe.OPTIONAL_HEADER.SizeOfHeapReserve
        except Exception:
            self.SizeOfHeapReserve = None

        try:
            self.SizeOfHeapCommit = self.pe.OPTIONAL_HEADER.SizeOfHeapCommit
        except Exception:
            self.SizeOfHeapCommit = None

        try:
            self.LoaderFlags = self.pe.OPTIONAL_HEADER.LoaderFlags
        except Exception:
            self.LoaderFlags = None

        try:
            self.NumberOfRvaAndSizes = self.pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
        except Exception:
            self.NumberOfRvaAndSizes = None

        # Data Directories
        try:
            self.ExportRVA = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[0].VirtualAddress
        except Exception:
            self.ExportRVA = None

        try:
            self.ExportSize = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[0].Size
        except Exception:
            self.ExportSize = None

        try:
            self.ImportRVA = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[1].VirtualAddress
        except Exception:
            self.ImportRVA = None

        try:
            self.ImportSize = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[1].Size
        except Exception:
            self.ImportSize = None

        try:
            self.ResourceRVA = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[2].VirtualAddress
        except Exception:
            self.ResourceRVA = None

        try:
            self.ResourceSize = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[2].Size
        except Exception:
            self.ResourceSize = None

        try:
            self.ExceptionRVA = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[3].VirtualAddress
        except Exception:
            self.ExceptionRVA = None

        try:
            self.ExceptionSize = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[3].Size
        except Exception:
            self.ExceptionSize = None

        try:
            self.SecurityRVA = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[4].VirtualAddress
        except Exception:
            self.SecurityRVA = None

        try:
            self.SecuritySize = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[4].Size
        except Exception:
            self.SecuritySize = None

        try:
            self.BaserelocRVA = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[5].VirtualAddress
        except Exception:
            self.BaserelocRVA = None

        try:
            self.BaserelocSize = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[5].Size
        except Exception:
            self.BaserelocSize = None

        try:
            self.DebugRVA = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[6].VirtualAddress
        except Exception:
            self.DebugRVA = None

        try:
            self.DebugSize = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[6].Size
        except Exception:
            self.DebugSize = 0

        try:
            self.ArchitectureRVA = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[7].VirtualAddress
        except Exception:
            self.ArchitectureRVA = None

        try:
            self.ArchitectureSize = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[7].Size
        except Exception:
            self.ArchitectureSize = None

        try:
            self.GlobalPtrRVA = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[8].VirtualAddress
        except Exception:
            self.GlobalPtrRVA = None

        try:
            self.GlobalPtrSize = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[8].Size
        except Exception:
            self.GlobalPtrSize = None

        try:
            self.TLSRVA = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[9].VirtualAddress
        except Exception:
            self.TLSRVA = None

        try:
            self.TLSSize = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[9].Size
        except Exception:
            self.TLSSize = None

        try:
            self.LoadConfigRVA = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[10].VirtualAddress
        except Exception:
            self.LoadConfigRVA = None

        try:
            self.LoadConfigSize = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[10].Size
        except Exception:
            self.LoadConfigSize = None

        try:
            self.BoundImportRVA = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[11].VirtualAddress
        except Exception:
            self.BoundImportRVA = None

        try:
            self.BoundImportSize = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[11].Size
        except Exception:
            self.BoundImportSize = None

        try:
            self.IATRVA = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[12].VirtualAddress
        except Exception:
            self.IATRVA = None

        try:
            self.IATSize = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[12].Size
        except Exception:
            self.IATSize = None

        try:
            self.DelayImportRVA = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[13].VirtualAddress
        except Exception:
            self.DelayImportRVA = None

        try:
            self.DelayImportSize = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[13].Size
        except Exception:
            self.DelayImportSize = None

        try:
            self.COMDescriptorRVA = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[14].VirtualAddress
        except Exception:
            self.COMDescriptorRVA = None

        try:
            self.COMDescriptorSize = self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[14].Size
        except Exception:
            self.COMDescriptorSize = None


         # If the PE file was loaded using the fast_load=True argument, we will need to parse the data directories:
        self.pe.parse_data_directories()
        imported_dll = {}
        number_dll = 0
        try:
            for entry in self.pe.DIRECTORY_ENTRY_IMPORT:
                if entry is not None:
                #print(entry.dll)
                    number_dll += 1
                    for imp in entry.imports:
                        #print('\t', hex(imp.address), imp.name)
                        if imp.name is not None:
                            #print(imp.name.decode())
                            imported_dll[entry.dll.decode()] = imp.name.decode()
        except:
            pass#print("[-]")
                        
        self.ImportedDLL = imported_dll
        self.NumberOfImportDLL = number_dll
        
        section_names = {}
        number_sections = 0
        try:
            for section in self.pe.sections:
                number_sections += 1
                #print (section.Name, hex(section.VirtualAddress), hex(section.Misc_VirtualSize), section.SizeOfRawData )
                section_names[section.Name.decode()] = section.SizeOfRawData
            self.SectionNames = section_names
            self.NumberOfSections = number_sections
        except:
            pass#print("[-]")
            
        number_import_functions = 0
        import_function = []
        
        try:
            if self.pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_IMPORT']].VirtualAddress != 0:
                self.pe.parse_data_directories(directories=[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_IMPORT']])
                for entry in self.pe.DIRECTORY_ENTRY_IMPORT:
                    for imp in entry.imports:
                        #print('\t', hex(imp.address), imp.name)
                        if imp.name:
                            number_import_functions += 1
                            import_function.append(imp.name.decode())
        except:
            pass#print("[-]")
            
        self.NumberOfImportFunctions = number_import_functions
        self.ImportedFunctions = import_function
        
    def Construct(self):
        sample = {}

        for attr, k in self.__dict__.items():
            if(attr != "pe"):
                sample[attr] = k
        return sample
    
    